{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nlet OtpVerifyComponent = class OtpVerifyComponent {\n  constructor(phoneVerify, router, registerService, courseservice) {\n    this.phoneVerify = phoneVerify;\n    this.router = router;\n    this.registerService = registerService;\n    this.courseservice = courseservice;\n    // @Output() event = new EventEmitter<string>();\n    this.form = new FormGroup({\n      otp: new FormControl('', [Validators.required, Validators.minLength(6), Validators.maxLength(6)]),\n      name: new FormControl(null, Validators.required),\n      phoneNumber: new FormControl(null, [Validators.required, Validators.pattern(\"^((\\\\+91-?)|0)?[0-9]{10}$\")]),\n      whatsappNumber: new FormControl(null, Validators.required),\n      college: new FormControl(null, Validators.required),\n      branch: new FormControl(null, Validators.required),\n      semester: new FormControl(null, Validators.required),\n      address: new FormControl(null, Validators.required),\n      parentNumber: new FormControl(null, Validators.required),\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      course: new FormGroup({\n        cid: new FormControl()\n      })\n    });\n    this.otpview = true;\n    this.registerform = {\n      name: '',\n      phoneNumber: '',\n      whatsappNumber: '',\n      college: '',\n      branch: '',\n      semester: 0,\n      address: '',\n      email: '',\n      parentNumber: '',\n      cid: 0,\n      cname: ''\n    };\n    this.registerview = false;\n  }\n  get otp() {\n    return this.form.get('otp');\n  }\n  // check(retval:any):boolean{\n  //   if(retval===\"Valid otp!\"){\n  //     return true;\n  //   }else{\n  //     return false;\n  //   }\n  // }\n  onClick(data) {\n    let maindata = Object.assign(data, JSON.parse(this.phoneVerify.getNumber()));\n    console.log(maindata);\n    this.phoneVerify.postOtp(maindata).subscribe(response => {\n      alert(\"Otp is validated\");\n      console.log(response);\n      // alert(\"Otp is validated\")\n      this.registerform = response;\n      // this.router.navigate(['phoneNumberVerify/otpVerify/registerForm']);\n      this.phoneVerify.clear();\n      // this.registerService.setData(response);\n      // this.event.emit(this.registerService.getData());\n      this.otpview = false;\n      this.registerview = true;\n    }, error => {\n      // console.log(error);\n      // alert(\"Otp is invalid\");\n      this.form.reset();\n      if (error.status == 404) {\n        console.log(\"error resolved\");\n        alert(\"Otp is validated\");\n        this.otpview = false;\n        this.registerview = true;\n      }\n    });\n    // if(this.check(retval)){\n    //   alert(\"Phone number verified successfully\");\n    //   this.router.navigate(['registerForm']);\n    // }else{\n    //   alert(\"Invalid otp.Verify again\");\n    // }\n    // this.phoneVerify.getData((data:any)=>{\n    //    if(data!==null){  \n    //       this.registerService.setData(data);\n    //    }\n    // });\n  }\n  // senddata(){\n  //   //let data2=this.registerService.getData();\n  //   this.event.emit(this.registerService.getData());\n  // }\n  onClick2() {\n    console.log(JSON.parse(this.phoneVerify.getNumber()));\n    this.phoneVerify.postNumber(JSON.parse(this.phoneVerify.getNumber()), retval => {\n      console.log(retval);\n      alert(\"Otp sent to your phone number successfully\");\n    });\n  }\n  postdata(data) {\n    this.registerService.postregister(data).subscribe(response => {\n      console.log(response);\n      alert(\"data sent successfully\");\n    }), error => {\n      if (error.status == 500) {\n        console.log(\"error resolved\");\n        alert(\"data sent successfully\");\n      }\n    };\n  }\n};\nOtpVerifyComponent = __decorate([Component({\n  selector: 'app-otp-verify',\n  templateUrl: './otp-verify.component.html',\n  styleUrls: ['./otp-verify.component.css']\n})], OtpVerifyComponent);\nexport { OtpVerifyComponent };","map":{"version":3,"mappings":"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","names":["Component","FormGroup","FormControl","Validators","OtpVerifyComponent","constructor","phoneVerify","router","registerService","courseservice","otp","required","minLength","maxLength","name","phoneNumber","pattern","whatsappNumber","college","branch","semester","address","parentNumber","email","course","cid","cname","form","get","onClick","data","maindata","Object","assign","JSON","parse","getNumber","console","log","postOtp","subscribe","response","alert","registerform","clear","otpview","registerview","error","reset","status","onClick2","postNumber","retval","postdata","postregister","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["G:\\project\\savitasoft\\angular-project\\src\\app\\components\\registration\\otp-verify\\otp-verify.component.ts"],"sourcesContent":["\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, EventEmitter, Output } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { PhoneVerifyService } from 'src/app/services/phone-verify.service';\r\nimport { RegisterService } from 'src/app/services/register.service';\r\n//import { RegisterForm } from '../register-form/register-form.component';\r\n\r\nexport interface Otp{\r\n  otp: string;\r\n}\r\nexport interface RegisterForm{\r\n  name: string;\r\n  phoneNumber: string;\r\n  whatsappNumber: string;\r\n  college: string;\r\n  branch: string;\r\n  semester: number;\r\n  address: string;\r\n  email: string;\r\n  parentNumber:string;\r\n  cid: number;\r\n  cname: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-otp-verify',\r\n  templateUrl: './otp-verify.component.html',\r\n  styleUrls: ['./otp-verify.component.css']\r\n})\r\nexport class OtpVerifyComponent {\r\n // @Output() event = new EventEmitter<string>();\r\n  form= new FormGroup({\r\n    otp: new FormControl('',[Validators.required, Validators.minLength(6),Validators.maxLength(6)]),\r\n    name:  new FormControl<any>(null,Validators.required),\r\n    phoneNumber: new FormControl<any>(null,[Validators.required, Validators.pattern(\"^((\\\\+91-?)|0)?[0-9]{10}$\")]),\r\n    whatsappNumber: new FormControl(<any>null,Validators.required),\r\n    college: new FormControl<any>(null,Validators.required),\r\n    branch: new FormControl<any>(null,Validators.required),\r\n    semester: new FormControl<any>(null,Validators.required),\r\n    address: new FormControl<any>(null,Validators.required),\r\n    parentNumber:new FormControl<any>(null,Validators.required),\r\n    email: new FormControl<any>(null,[Validators.required,Validators.email]),\r\n    course:new FormGroup({\r\n      cid: new FormControl()\r\n    })\r\n });\r\n\r\n otpview:boolean=true;\r\n registerform:RegisterForm={\r\n   name: '',\r\n   phoneNumber: '',\r\n   whatsappNumber: '',\r\n   college: '',\r\n   branch: '',\r\n   semester: 0,\r\n   address: '',\r\n   email: '',\r\n   parentNumber: '',\r\n   cid: 0,\r\n   cname: ''\r\n }\r\n registerview:boolean=false;\r\n\r\n  constructor(private phoneVerify: PhoneVerifyService, private router: Router, private registerService:RegisterService,private courseservice:Cou){}\r\n\r\n  \r\n  public get otp(){\r\n    return this.form.get('otp');\r\n  }\r\n  \r\n  // check(retval:any):boolean{\r\n  //   if(retval===\"Valid otp!\"){\r\n  //     return true;\r\n  //   }else{\r\n  //     return false;\r\n  //   }\r\n  // }\r\n\r\n  onClick(data: string)\r\n  {\r\n     let maindata:any = Object.assign(data,JSON.parse(this.phoneVerify.getNumber()));\r\n     console.log(maindata);\r\n     this.phoneVerify.postOtp(maindata).subscribe((response:any)=>{\r\n        alert(\"Otp is validated\")\r\n        console.log(response);\r\n       // alert(\"Otp is validated\")\r\n        this.registerform=response;\r\n       // this.router.navigate(['phoneNumberVerify/otpVerify/registerForm']);\r\n        this.phoneVerify.clear();\r\n       // this.registerService.setData(response);\r\n       // this.event.emit(this.registerService.getData());\r\n        this.otpview=false;\r\n        this.registerview=true;\r\n      \r\n     \r\n    },\r\n    (error : HttpErrorResponse)=>{\r\n      // console.log(error);\r\n      // alert(\"Otp is invalid\");\r\n      this.form.reset();\r\n      if(error.status==404){\r\n        console.log(\"error resolved\")\r\n        alert(\"Otp is validated\")\r\n        this.otpview=false;\r\n        this.registerview=true;\r\n      }\r\n    });\r\n        // if(this.check(retval)){\r\n        //   alert(\"Phone number verified successfully\");\r\n        //   this.router.navigate(['registerForm']);\r\n        // }else{\r\n        //   alert(\"Invalid otp.Verify again\");\r\n        // }\r\n        \r\n   \r\n\r\n    \r\n\r\n    // this.phoneVerify.getData((data:any)=>{\r\n    //    if(data!==null){  \r\n    //       this.registerService.setData(data);\r\n    //    }\r\n    // });\r\n\r\n  }\r\n  // senddata(){\r\n  //   //let data2=this.registerService.getData();\r\n  //   this.event.emit(this.registerService.getData());\r\n  // }\r\n\r\n  onClick2()\r\n  {\r\n    console.log(JSON.parse(this.phoneVerify.getNumber()));\r\n    this.phoneVerify.postNumber(JSON.parse(this.phoneVerify.getNumber()),(retval:any)=>{\r\n      console.log(retval);\r\n      alert(\"Otp sent to your phone number successfully\");\r\n    });\r\n  }\r\n\r\n  postdata(data:any){\r\n    this.registerService.postregister(data).subscribe((response)=>{\r\n      console.log(response);\r\n     \r\n      alert(\"data sent successfully\");\r\n      }),\r\n      (error:HttpErrorResponse)=>{\r\n        if(error.status==500){\r\n          console.log(\"error resolved\")\r\n          alert(\"data sent successfully\");\r\n        }\r\n      }\r\n  \r\n}\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}

{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nlet OtpVerifyComponent = class OtpVerifyComponent {\n  constructor(phoneVerify, router, registerService, register) {\n    this.phoneVerify = phoneVerify;\n    this.router = router;\n    this.registerService = registerService;\n    this.register = register;\n    this.event = new EventEmitter();\n    this.form = new FormGroup({\n      otp: new FormControl('', [Validators.required, Validators.minLength(6), Validators.maxLength(6)])\n    });\n  }\n  get otp() {\n    return this.form.get('otp');\n  }\n  // check(retval:any):boolean{\n  //   if(retval===\"Valid otp!\"){\n  //     return true;\n  //   }else{\n  //     return false;\n  //   }\n  // }\n  onClick(data) {\n    let maindata = Object.assign(data, JSON.parse(this.phoneVerify.getNumber()));\n    console.log(maindata);\n    this.phoneVerify.postOtp(maindata).subscribe(response => {\n      console.log(response);\n      alert(\"Otp is validated\");\n      this.router.navigate(['phoneNumberVerify/otpVerify/registerForm']);\n      this.phoneVerify.clear();\n      // this.registerService.setData(response);\n      // this.event.emit(this.registerService.getData());\n    }, error => {\n      console.log(error);\n      alert(\"Otp is invalid\");\n    });\n    // if(this.check(retval)){\n    //   alert(\"Phone number verified successfully\");\n    //   this.router.navigate(['registerForm']);\n    // }else{\n    //   alert(\"Invalid otp.Verify again\");\n    // }\n    // this.phoneVerify.getData((data:any)=>{\n    //    if(data!==null){  \n    //       this.registerService.setData(data);\n    //    }\n    // });\n  }\n\n  senddata() {\n    //let data2=this.registerService.getData();\n    this.event.emit(this.registerService.getData());\n  }\n  onClick2() {\n    console.log(JSON.parse(this.phoneVerify.getNumber()));\n    this.phoneVerify.postNumber(JSON.parse(this.phoneVerify.getNumber()), retval => {\n      console.log(retval);\n      alert(\"Otp sent to your phone number successfully\");\n    });\n  }\n};\n__decorate([Output()], OtpVerifyComponent.prototype, \"event\", void 0);\nOtpVerifyComponent = __decorate([Component({\n  selector: 'app-otp-verify',\n  templateUrl: './otp-verify.component.html',\n  styleUrls: ['./otp-verify.component.css']\n})], OtpVerifyComponent);\nexport { OtpVerifyComponent };","map":{"version":3,"mappings":";AACA,SAASA,SAAS,EAAEC,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC/D,SAASC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAe5D,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAO7BC,YAAoBC,WAA+B,EAAUC,MAAc,EAAUC,eAA+B,EAAUC,QAAqB;IAA/H,gBAAW,GAAXH,WAAW;IAA8B,WAAM,GAANC,MAAM;IAAkB,oBAAe,GAAfC,eAAe;IAA0B,aAAQ,GAARC,QAAQ;IAN5H,UAAK,GAAG,IAAIV,YAAY,EAAU;IAC5C,SAAI,GAAE,IAAIE,SAAS,CAAC;MAClBS,GAAG,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAC,CAACC,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACS,SAAS,CAAC,CAAC,CAAC,EAACT,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,CAAC;KAChG,CAAC;EAGoJ;EAErJ,IAAWH,GAAG;IACZ,OAAO,IAAI,CAACI,IAAI,CAACC,GAAG,CAAC,KAAK,CAAC;EAC7B;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,OAAO,CAACC,IAAY;IAEjB,IAAIC,QAAQ,GAAOC,MAAM,CAACC,MAAM,CAACH,IAAI,EAACI,IAAI,CAACC,KAAK,CAAC,IAAI,CAAChB,WAAW,CAACiB,SAAS,EAAE,CAAC,CAAC;IAC/EC,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;IACrB,IAAI,CAACZ,WAAW,CAACoB,OAAO,CAACR,QAAQ,CAAC,CAACS,SAAS,CAAEC,QAAQ,IAAG;MACxDJ,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;MACrBC,KAAK,CAAC,kBAAkB,CAAC;MACzB,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,0CAA0C,CAAC,CAAC;MAClE,IAAI,CAACxB,WAAW,CAACyB,KAAK,EAAE;MACxB;MACA;IAGF,CAAC,EACAC,KAAK,IAAG;MACPR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;MAClBH,KAAK,CAAC,gBAAgB,CAAC;IACzB,CAAC,CAAC;IACE;IACA;IACA;IACA;IACA;IACA;IAMJ;IACA;IACA;IACA;IACA;EAEF;;EACAI,QAAQ;IACN;IACA,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC3B,eAAe,CAAC4B,OAAO,EAAE,CAAC;EACjD;EAEAC,QAAQ;IAENb,OAAO,CAACC,GAAG,CAACJ,IAAI,CAACC,KAAK,CAAC,IAAI,CAAChB,WAAW,CAACiB,SAAS,EAAE,CAAC,CAAC;IACrD,IAAI,CAACjB,WAAW,CAACgC,UAAU,CAACjB,IAAI,CAACC,KAAK,CAAC,IAAI,CAAChB,WAAW,CAACiB,SAAS,EAAE,CAAC,EAAEgB,MAAU,IAAG;MACjFf,OAAO,CAACC,GAAG,CAACc,MAAM,CAAC;MACnBV,KAAK,CAAC,4CAA4C,CAAC;IACrD,CAAC,CAAC;EACJ;CAID;AAxEWW,YAATxC,MAAM,EAAE,iDAAoC;AADlCI,kBAAkB,eAL9BN,SAAS,CAAC;EACT2C,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACWvC,kBAAkB,CAyE9B;SAzEYA,kBAAkB","names":["Component","EventEmitter","Output","FormGroup","FormControl","Validators","OtpVerifyComponent","constructor","phoneVerify","router","registerService","register","otp","required","minLength","maxLength","form","get","onClick","data","maindata","Object","assign","JSON","parse","getNumber","console","log","postOtp","subscribe","response","alert","navigate","clear","error","senddata","event","emit","getData","onClick2","postNumber","retval","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["G:\\project\\savitasoft\\angular-project\\src\\app\\components\\registration\\otp-verify\\otp-verify.component.ts"],"sourcesContent":["\r\nimport { Component, EventEmitter, Output } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { PhoneVerifyService } from 'src/app/services/phone-verify.service';\r\nimport { RegisterService } from 'src/app/services/register.service';\r\nimport { RegisterForm } from '../register-form/register-form.component';\r\n\r\nexport interface Otp{\r\n  otp: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-otp-verify',\r\n  templateUrl: './otp-verify.component.html',\r\n  styleUrls: ['./otp-verify.component.css']\r\n})\r\nexport class OtpVerifyComponent {\r\n  @Output() event = new EventEmitter<string>();\r\n  form= new FormGroup({\r\n    otp: new FormControl('',[Validators.required, Validators.minLength(6),Validators.maxLength(6)])\r\n });\r\n\r\n\r\n  constructor(private phoneVerify: PhoneVerifyService, private router: Router, private registerService:RegisterService, private register:RegisterForm){}\r\n\r\n  public get otp(){\r\n    return this.form.get('otp');\r\n  }\r\n  \r\n  // check(retval:any):boolean{\r\n  //   if(retval===\"Valid otp!\"){\r\n  //     return true;\r\n  //   }else{\r\n  //     return false;\r\n  //   }\r\n  // }\r\n\r\n  onClick(data: string)\r\n  {\r\n     let maindata:any = Object.assign(data,JSON.parse(this.phoneVerify.getNumber()));\r\n     console.log(maindata);\r\n     this.phoneVerify.postOtp(maindata).subscribe((response)=>{\r\n      console.log(response);\r\n      alert(\"Otp is validated\")\r\n      this.router.navigate(['phoneNumberVerify/otpVerify/registerForm']);\r\n      this.phoneVerify.clear();\r\n      // this.registerService.setData(response);\r\n      // this.event.emit(this.registerService.getData());\r\n      \r\n      \r\n    },\r\n    (error)=>{\r\n      console.log(error);\r\n      alert(\"Otp is invalid\");\r\n    });\r\n        // if(this.check(retval)){\r\n        //   alert(\"Phone number verified successfully\");\r\n        //   this.router.navigate(['registerForm']);\r\n        // }else{\r\n        //   alert(\"Invalid otp.Verify again\");\r\n        // }\r\n        \r\n   \r\n\r\n    \r\n\r\n    // this.phoneVerify.getData((data:any)=>{\r\n    //    if(data!==null){  \r\n    //       this.registerService.setData(data);\r\n    //    }\r\n    // });\r\n\r\n  }\r\n  senddata(){\r\n    //let data2=this.registerService.getData();\r\n    this.event.emit(this.registerService.getData());\r\n  }\r\n\r\n  onClick2()\r\n  {\r\n    console.log(JSON.parse(this.phoneVerify.getNumber()));\r\n    this.phoneVerify.postNumber(JSON.parse(this.phoneVerify.getNumber()),(retval:any)=>{\r\n      console.log(retval);\r\n      alert(\"Otp sent to your phone number successfully\");\r\n    });\r\n  }\r\n\r\n\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
